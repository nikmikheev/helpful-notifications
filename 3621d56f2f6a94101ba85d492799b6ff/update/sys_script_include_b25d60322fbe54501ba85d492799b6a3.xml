<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_13231_helpful_em.EmailFeedbackUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>EmailFeedbackUtil</name>
        <script><![CDATA[var EmailFeedbackUtil = Class.create();
EmailFeedbackUtil.prototype = {
	initialize : function () {
	},
	
	checkForUpdates : function (repo) {
		//Set default value for repo if argument not specified
		repo = (typeof repo == 'undefined') ? 'helpful-notifications' : repo;
		
		var currentReleaseTag = gs.getProperty('x_13231_helpful_em.current_release_tag', '');
		var propUpdatedReleaseObj = gs.getProperty('x_13231_helpful_em.updated_release_json', '{}');
		// var propUpdateAvailable = gs.getProperty('x_13231_helpful_em.update_available', 'false').toLowerCase() == 'true';
		var latestReleaseResponseBody = this._getLatestReleaseJSON(repo);
		var latestReleaseData = {
			'name' : latestReleaseResponseBody.name.toString(),
			'tag' : latestReleaseResponseBody.tag_name.toString(),
			'url' : latestReleaseResponseBody.html_url.toString()
		};
		
		if (propUpdatedReleaseObj) {
			//If updated release object exists, parse it as JSON. This step is necessary because JSON.parse() throws a hard error if you pass it something that isn't an object.
			propUpdatedReleaseObj = JSON.parse(propUpdatedReleaseObj);
		}
		
		//If we couldn't get the latest release tag, something has gone wrong.
		// Log an error, but then return false as though no update is available.
		if (!latestReleaseData.tag) {
			this._clearLatestReleaseData();
			gs.error('EmailFeedbackUtil.checkForUpdates() has encountered an error. Unable to retrieve latest release tag for repo ' + repo + '.');
			return false;
		}
		
		//If the latest version tag doesn't match the current version tag,
		// there is an update available.
		if (latestReleaseData.tag.toLowerCase() != currentReleaseTag.toLowerCase()) {
			//If system is already aware of latest release, return true but do not update the
			// latest release properties.
			if (
				propUpdatedReleaseObj &&
				propUpdatedReleaseObj.hasOwnProperty('tag') &&
				latestReleaseData.tag.toLowerCase() == propUpdatedReleaseObj.tag.toLowerCase()
			) {
				return true;
			}
			
			/* If latest release tag does not match current release tag, AND system does not already
			    have the latest release data stored, then store data about the latest release in the
			    relevant properties and then return true.*/
			this._storeLatestReleaseData(latestReleaseData);
			return true;
		}
		
		//If API call was successful but no update was found, then we have the most current version.
		// Ensure that latest release data is cleared out
		this._clearLatestReleaseData();
		return false;
	},
	
	_clearLatestReleaseData: function() {
		var updateAvailable = gs.getProperty('x_13231_helpful_em.update_available', 'false');
		var updatedRelease = gs.getProperty('x_13231_helpful_em.updated_release_json', '{}');
		
		//To avoid an unnecessary system cache flush, only update properties when actually necessary.
		if (updateAvailable != 'false') {
			gs.setProperty('x_13231_helpful_em.update_available', 'false');
		}
		
		if (updatedRelease != '{}') {
			gs.setProperty('x_13231_helpful_em.updated_release_json', '{}');
		}
	},
	
	_storeLatestReleaseData : function (latestReleaseData) {
		gs.setProperty('x_13231_helpful_em.update_available', 'true');
		gs.setProperty('x_13231_helpful_em.updated_release_json', JSON.stringify(latestReleaseData));
	},
	
	_getLatestReleaseJSON : function (repo) {
		//Set default value for repo if argument not specified
		repo = (typeof repo == 'undefined') ? 'helpful-notifications' : repo;
		
		var responseLatestRelease, latestReleaseBody, httpStatus;
		var rLatestRelease = new sn_ws.RESTMessageV2(
			'x_13231_helpful_em.Email feedback-Check for updates',
			'Get latest release JSON'
		);
		
		rLatestRelease.setStringParameterNoEscape('repo', repo);
		responseLatestRelease = rLatestRelease.execute();
		latestReleaseBody = responseLatestRelease.getBody();
		httpStatus = responseLatestRelease.getStatusCode();
		
		/*if (httpStatus.indexOf('2' != 0)) {
			//todo: Do something to handle request failure
		}*/
		
		return JSON.parse(latestReleaseBody);
	},
	
	type : 'EmailFeedbackUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-08-26 19:18:22</sys_created_on>
        <sys_id>b25d60322fbe54501ba85d492799b6a3</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>EmailFeedbackUtil</sys_name>
        <sys_package display_value="Was this email helpful" source="x_13231_helpful_em">3621d56f2f6a94101ba85d492799b6ff</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Was this email helpful">3621d56f2f6a94101ba85d492799b6ff</sys_scope>
        <sys_update_name>sys_script_include_b25d60322fbe54501ba85d492799b6a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-08-26 20:16:28</sys_updated_on>
    </sys_script_include>
</record_update>
